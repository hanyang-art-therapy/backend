plugins {
	id 'java'
	id 'org.springframework.boot' version '3.4.5'
	id 'io.spring.dependency-management' version '1.1.7'
	id 'com.diffplug.spotless' version '6.23.3'
}

group = 'com.hanyang.arttherapy'
version = '0.0.1-SNAPSHOT'

java {
	toolchain {
		languageVersion = JavaLanguageVersion.of(17)
	}
}

configurations {
	compileOnly {
		extendsFrom annotationProcessor
	}
}

repositories {
	mavenCentral()
}

dependencies {
	implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
//	implementation 'org.springframework.boot:spring-boot-starter-security'
	implementation 'org.springframework.boot:spring-boot-starter-web'
	compileOnly 'org.projectlombok:lombok'
	developmentOnly 'org.springframework.boot:spring-boot-devtools'
	runtimeOnly 'com.mysql:mysql-connector-j'
	annotationProcessor 'org.projectlombok:lombok'
	testImplementation 'org.springframework.boot:spring-boot-starter-test'
//	testImplementation 'org.springframework.security:spring-security-test'
	testRuntimeOnly 'org.junit.platform:junit-platform-launcher'

	// jwt
	implementation 'io.jsonwebtoken:jjwt-api:0.11.5'
	runtimeOnly 'io.jsonwebtoken:jjwt-impl:0.11.5'
	runtimeOnly 'io.jsonwebtoken:jjwt-jackson:0.11.5'

	// QueryDSL - JPA 및 APT 설정 (jakarta 사용)
	implementation 'com.querydsl:querydsl-jpa:5.0.0:jakarta'
	annotationProcessor 'com.querydsl:querydsl-apt:5.0.0:jakarta'
	annotationProcessor 'jakarta.persistence:jakarta.persistence-api:3.1.0'
	annotationProcessor 'jakarta.annotation:jakarta.annotation-api:2.1.1'

	// 비밀번호 메일인증
	implementation 'org.springframework.boot:spring-boot-starter-mail'
}

tasks.named('test') {
	useJUnitPlatform()
}

tasks.named("compileJava") {
	dependsOn 'spotlessJava'
}

ext.googleJavaFormatVersion = "1.18.1"

spotless {
	java {
		googleJavaFormat("$googleJavaFormatVersion")
		// 아래 순서로 import문 정렬
		importOrder('java', 'javax', 'jakarta', 'org', 'com')
		// 사용하지 않는 import 제거
		removeUnusedImports()
		// 각 라인 끝에 있는 공백을 제거
		trimTrailingWhitespace()
		// 파일 끝에 새로운 라인 추가
		endWithNewline()
	}
}
// Git hooks 업데이트 작업
tasks.register('updateGitHooks', Copy) {
	from 'script/pre-commit'
	into '.git/hooks'
}
// makeGitHooksExecutable 작업을 OS에 따라 실행 여부 결정
tasks.register('makeGitHooksExecutable', Exec) {
	// Windows가 아닌 경우에만 실행
	onlyIf { !System.properties['os.name'].toLowerCase().contains('windows') }
	commandLine 'chmod', '+x', '.git/hooks/pre-commit'
	dependsOn 'updateGitHooks'
}
// compileJava 작업이 실행되기 전에 makeGitHooksExecutable 작업을 실행
tasks.named('compileJava') {
	dependsOn 'makeGitHooksExecutable'
}


